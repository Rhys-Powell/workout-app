{
	"info": {
		"_postman_id": "0bff1082-9db5-4b11-ba78-fe1ee415f7b1",
		"name": "Workout-app functional API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19177718"
	},
	"item": [
		{
			"name": "AAA This token request needs to run first",
			"item": [
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const accessToken = response.access_token;\r",
									"if (accessToken) {\r",
									"    pm.environment.set(\"access_token\", accessToken);\r",
									"    console.log(\"Access token saved to environment variable: access_token\");\r",
									"} else {\r",
									"    console.error(\"Access token not found in the response!\");\r",
									"}\r",
									"pm.execution.setNextRequest(\"Get health\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"grant_type\": \"password\",\r\n  \"username\": \"{{api_tester_admin1_username}}\",\r\n  \"password\": \"{{api_tester_admin1_password}}\",\r\n  \"client_id\": \"{{auth0_client_id}}\",\r\n  \"client_secret\": \"{{auth0_client_secret}}\",\r\n  \"audience\": \"{{auth0_audience}}\",\r\n  \"connection\": \"Username-Password-Authentication\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth0_url}}/oauth/token",
							"host": [
								"{{auth0_url}}"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Script to set bearer header",
			"item": [
				{
					"name": "Get health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.execution.setNextRequest(\"Create user\");\r",
									"} catch (error) {\r",
									"    pm.execution.setNextRequest(null);\r",
									"    console.log(error);\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const accessToken = pm.environment.get(\"access_token\");\r",
									"\r",
									"if (!accessToken) {\r",
									"    pm.execution.setNextRequest(\"Request access token\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid schema\", function () {\r",
									"    schema = JSON.parse(pm.collectionVariables.get(\"user_schema\"));\r",
									"    // console.log(schema);\r",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"console.log(\"userId\", pm.response.json().id);\r",
									"pm.environment.set(\"test_user_id\", pm.response.json().id);\r",
									"pm.execution.setNextRequest(\"Get users\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Sally Field\",\r\n    \"email\": \"sally@gmail.com\",\r\n    \"auth0Id\": \"testAuth0Id\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"if (pm.response.json().length > 0) {\r",
									"    pm.test(\"First item has valid schema\", function () {\r",
									"        const firstItem = pm.response.json()[0];\r",
									"        schema = JSON.parse(pm.collectionVariables.get(\"user_schema\"));\r",
									"        // console.log(schema);\r",
									"        pm.expect(firstItem).to.have.jsonSchema(schema);\r",
									"    });\r",
									"};\r",
									"\r",
									"pm.execution.setNextRequest(\"Get user\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid schema\", function () {\r",
									"    schema = JSON.parse(pm.collectionVariables.get(\"user_schema\"));\r",
									"    // console.log(schema);\r",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Create exercise\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(null);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create exercise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid schema\", function () {\r",
									"    schema = JSON.parse(pm.collectionVariables.get(\"exercise_schema\"));\r",
									"    // console.log(schema);\r",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.environment.set(\"test_exercise_id\", pm.response.json().id);\r",
									"pm.execution.setNextRequest(\"Get exercises\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"userid\": {{test_user_id}},\r\n    \"name\": \"Test exercise\" \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/exercises",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"exercises"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get exercises",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"if (pm.response.json().length > 0) {\r",
									"    pm.test(\"First item has valid schema\", function () {\r",
									"        const firstItem = pm.response.json()[0];\r",
									"        schema = JSON.parse(pm.collectionVariables.get(\"exercise_schema\"));\r",
									"        // console.log(schema);\r",
									"        pm.expect(firstItem).to.have.jsonSchema(schema);\r",
									"    })\r",
									"}\r",
									"\r",
									"pm.execution.setNextRequest(\"Get exercise\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/exercises",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"exercises"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get exercise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid schema\", function () {\r",
									"    schema = JSON.parse(pm.collectionVariables.get(\"exercise_schema\"));\r",
									"    // console.log(schema);\r",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Create routine\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/exercises/{{test_exercise_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"exercises",
								"{{test_exercise_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete exercise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Delete user\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/exercises/{{test_exercise_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"exercises",
								"{{test_exercise_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid schema\", function () {\r",
									"    schema = JSON.parse(pm.collectionVariables.get(\"routine_schema\"));\r",
									"    // console.log(schema);\r",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"test_routine_id\", pm.response.json().id);\r",
									"pm.execution.setNextRequest(\"Get routines\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"userid\": {{test_user_id}},\r\n    \"name\": \"Test routine\" \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/routines",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"routines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get routines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"if (pm.response.json().length > 0) {\r",
									"    pm.test(\"First item has valid schema\", function () {\r",
									"        const firstItem = pm.response.json()[0];\r",
									"        schema = JSON.parse(pm.collectionVariables.get(\"routine_schema\"));\r",
									"        // console.log(schema);\r",
									"        pm.expect(firstItem).to.have.jsonSchema(schema);\r",
									"    });\r",
									"};\r",
									"\r",
									"pm.execution.setNextRequest(\"Get routine\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/routines",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"routines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid schema\", function () {\r",
									"    schema = JSON.parse(pm.collectionVariables.get(\"routine_schema\"));\r",
									"    // console.log(schema);\r",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Add exercise to routine\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"routines",
								"{{test_routine_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Delete exercise\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"routines",
								"{{test_routine_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add exercise to routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid schema\", function () {\r",
									"    let mainSchema = JSON.parse(pm.collectionVariables.get(\"routine_exercise_schema_with_details\"));\r",
									"    let exerciseSchema = JSON.parse(pm.collectionVariables.get(\"exercise_schema\"));\r",
									"    // Dynamically insert the exercise schema into the main schema\r",
									"    mainSchema.properties[\"exercise\"] = exerciseSchema;\r",
									"    // console.log(mainSchema);\r",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(mainSchema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"routineExercise_id\", pm.response.json().id);\r",
									"pm.execution.setNextRequest(\"Get exercises in routine with details\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}/exercises?exerciseId={{test_exercise_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"routines",
								"{{test_routine_id}}",
								"exercises"
							],
							"query": [
								{
									"key": "exerciseId",
									"value": "{{test_exercise_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get exercises in routine with details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"if (pm.response.json().length > 0) {\r",
									"    pm.test(\"First item has valid schema\", function () {\r",
									"        const firstItem = pm.response.json()[0];\r",
									"        let mainSchema = JSON.parse(pm.collectionVariables.get(\"routine_exercise_schema_with_details\"));\r",
									"        let exerciseSchema = JSON.parse(pm.collectionVariables.get(\"exercise_schema\"));\r",
									"        // Dynamically insert the exercise schema into the main schema\r",
									"        mainSchema.properties[\"exercise\"] = exerciseSchema;\r",
									"        // console.log(mainSchema);\r",
									"        pm.expect(firstItem).to.have.jsonSchema(mainSchema);\r",
									"    });\r",
									"};\r",
									"\r",
									"pm.execution.setNextRequest(\"Get exercises in routine without details\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}/exercises/?includeDetails=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"routines",
								"{{test_routine_id}}",
								"exercises",
								""
							],
							"query": [
								{
									"key": "includeDetails",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get exercises in routine without details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"if (pm.response.json().length > 0) {\r",
									"    pm.test(\"First item has valid schema\", function () {\r",
									"        const firstItem = pm.response.json()[0];\r",
									"        schema = JSON.parse(pm.collectionVariables.get(\"routine_exercise_schema\"));\r",
									"        // console.log(schema);\r",
									"        pm.expect(firstItem).to.have.jsonSchema(schema);\r",
									"    });\r",
									"};\r",
									"\r",
									"pm.execution.setNextRequest(\"Remove exercise from routine\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}/exercises?includeDetails=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"routines",
								"{{test_routine_id}}",
								"exercises"
							],
							"query": [
								{
									"key": "includeDetails",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove exercise from routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Delete routine\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}/exercises/{{test_exercise_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"routines",
								"{{test_routine_id}}",
								"exercises",
								"{{test_exercise_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_schema",
			"value": "{\"type\": \"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"},\"auth0Id\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"email\",\"auth0Id\"],\"additionalProperties\":false}",
			"type": "string"
		},
		{
			"key": "exercise_schema",
			"value": "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"userId\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"userId\"],\"additionalProperties\":false}",
			"type": "string"
		},
		{
			"key": "routine_schema",
			"value": "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"userId\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"userId\"],\"additionalProperties\":false}",
			"type": "string"
		},
		{
			"key": "routine_exercise_schema_with_details",
			"value": "{\"type\":\"object\",\"properties\":{\"id\": {\"type\": \"integer\"},\"routineId\":{\"type\":\"integer\"},\"exerciseId\":{\"type\":\"integer\"},\"exerciseOrder\":{\"type\":\"integer\"}, \"exercise\":\"SCHEMA INSERTED IN TEST\"},\"required\":[\"id\",\"routineId\",\"exerciseId\",\"exerciseOrder\",\"exercise\"],\"additionalProperties\":false}",
			"type": "string"
		},
		{
			"key": "routine_exercise_schema",
			"value": "{\"type\":\"object\",\"properties\":{\"id\": {\"type\": \"integer\"},\"routineId\":{\"type\":\"integer\"},\"exerciseId\":{\"type\":\"integer\"},\"exerciseOrder\":{\"type\":\"integer\"}},\"required\":[\"id\",\"routineId\",\"exerciseId\",\"exerciseOrder\"],\"additionalProperties\":false}",
			"type": "string"
		}
	]
}