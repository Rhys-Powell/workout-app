{
  "info": {
    "_postman_id": "1bec0609-fe1e-4ea1-83b0-9aec5143661e",
    "name": "Workout app - instructions in 'Overview' tab",
    "description": "When running API tests for Production, select 'Production' environment (top right corner of Postman UI).\n\nThen go to 'Authorization' tab, and click 'Get New Access Token' button.\n\nIn the window that pops up once token is returned from Auth0, click 'Use Token'.\n\nNext run the request within the 'Set access token as a collection variable' folder to do what the request name indicates.\n\nAfter that, when running any API requests under the 'Script to set bearer header based on env' folder, a pre-request script will automatically set the correct header based on the environment selected (in top right corner of Postman UI).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "19177718"
  },
  "item": [
    {
      "name": "Set access token as a collection variable",
      "item": [
        {
          "name": "Set Prod access token as collection variable",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const prodAccessToken = pm.request.auth.parameters().get('accessToken');\r",
                  "\r",
                  "if (prodAccessToken) {\r",
                  "    pm.collectionVariables.set(\"access_token_prod\", prodAccessToken)\r",
                  "};"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://postman-echo.com/get",
              "protocol": "https",
              "host": ["postman-echo", "com"],
              "path": ["get"]
            }
          },
          "response": []
        }
      ],
      "description": "If you've obtained a prod access token (see instructions in 'Overview' tab in 'Workout app' collection folder), then running the request in this folder will execute a script to set that token as a collection variable.\n\nAfter that, when running any API requests under the 'Script to set bearer header based on env' folder, a pre-request script will automatically set the correct header based on the environment selected (in top right corner of Postman UI).",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Script to set bearer header based on env",
      "item": [
        {
          "name": "Health",
          "item": [
            {
              "name": "Get health",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Create user\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/health",
                  "host": ["{{base_url}}"],
                  "path": ["api", "health"]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "noauth"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Users",
          "item": [
            {
              "name": "Create user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    schema = JSON.parse(pm.collectionVariables.get(\"user_schema\"));\r",
                      "    // console.log(schema);\r",
                      "    pm.expect(data).to.have.jsonSchema(schema);\r",
                      "})\r",
                      "\r",
                      "pm.environment.set(\"test_user_id\", data.id);\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Get users\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "};"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Sally Field\",\r\n    \"email\": \"sally@gmail.com\",\r\n    \"auth0Id\": \"testAuth0Id\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/api/users",
                  "host": ["{{base_url}}"],
                  "path": ["api", "users"]
                }
              },
              "response": []
            },
            {
              "name": "Get users",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response body is an array\", function () {\r",
                      "    pm.expect(data).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "if (data.length > 0) {\r",
                      "    pm.test(\"First item has valid schema\", function () {\r",
                      "        const firstItem = data[0];\r",
                      "        schema = JSON.parse(pm.collectionVariables.get(\"user_schema\"));\r",
                      "        // console.log(schema);\r",
                      "        pm.expect(firstItem).to.have.jsonSchema(schema);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Get user\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "};"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users",
                  "host": ["{{base_url}}"],
                  "path": ["api", "users"]
                }
              },
              "response": []
            },
            {
              "name": "Get user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    schema = JSON.parse(pm.collectionVariables.get(\"user_schema\"));\r",
                      "    // console.log(schema);\r",
                      "    pm.expect(data).to.have.jsonSchema(schema);\r",
                      "});\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Create exercise\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "};"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "users", "{{test_user_id}}"]
                }
              },
              "response": []
            },
            {
              "name": "Delete user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "users", "{{test_user_id}}"]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "noauth"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Exercises",
          "item": [
            {
              "name": "Create exercise",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    schema = JSON.parse(pm.collectionVariables.get(\"exercise_schema\"));\r",
                      "    // console.log(schema);\r",
                      "    pm.expect(data).to.have.jsonSchema(schema);\r",
                      "})\r",
                      "\r",
                      "pm.environment.set(\"test_exercise_id\", data.id);\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Get exercises\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "}; \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n    \"userid\": {{test_user_id}},\r\n    \"name\": \"Test exercise\" \r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/exercises",
                  "host": ["{{base_url}}"],
                  "path": ["api", "users", "{{test_user_id}}", "exercises"]
                }
              },
              "response": []
            },
            {
              "name": "Get exercises",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response body is an array\", function () {\r",
                      "    pm.expect(data).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "if (data.length > 0) {\r",
                      "    pm.test(\"First item has valid schema\", function () {\r",
                      "        const firstItem = data[0];\r",
                      "        schema = JSON.parse(pm.collectionVariables.get(\"exercise_schema\"));\r",
                      "        // console.log(schema);\r",
                      "        pm.expect(firstItem).to.have.jsonSchema(schema);\r",
                      "    })\r",
                      "}"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/exercises",
                  "host": ["{{base_url}}"],
                  "path": ["api", "users", "{{test_user_id}}", "exercises"]
                }
              },
              "response": []
            },
            {
              "name": "Get exercise",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    schema = JSON.parse(pm.collectionVariables.get(\"exercise_schema\"));\r",
                      "    // console.log(schema);\r",
                      "    pm.expect(data).to.have.jsonSchema(schema);\r",
                      "});\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Create routine\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "}; \r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/exercises/{{test_exercise_id}}",
                  "host": ["{{base_url}}"],
                  "path": [
                    "api",
                    "users",
                    "{{test_user_id}}",
                    "exercises",
                    "{{test_exercise_id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete exercise",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
                      "});\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Delete user\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "}; "
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/exercises/{{test_exercise_id}}",
                  "host": ["{{base_url}}"],
                  "path": [
                    "api",
                    "users",
                    "{{test_user_id}}",
                    "exercises",
                    "{{test_exercise_id}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "noauth"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Routines",
          "item": [
            {
              "name": "Create routine",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    schema = JSON.parse(pm.collectionVariables.get(\"routine_schema\"));\r",
                      "    // console.log(schema);\r",
                      "    pm.expect(data).to.have.jsonSchema(schema);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"test_routine_id\", data.id);\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Get routines\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "}; \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n    \"userid\": {{test_user_id}},\r\n    \"name\": \"Test routine\" \r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/routines",
                  "host": ["{{base_url}}"],
                  "path": ["api", "users", "{{test_user_id}}", "routines"]
                }
              },
              "response": []
            },
            {
              "name": "Get routines",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response body is an array\", function () {\r",
                      "    pm.expect(data).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "if (data.length > 0) {\r",
                      "    pm.test(\"First item has valid schema\", function () {\r",
                      "        const firstItem = data[0];\r",
                      "        schema = JSON.parse(pm.collectionVariables.get(\"routine_schema\"));\r",
                      "        // console.log(schema);\r",
                      "        pm.expect(firstItem).to.have.jsonSchema(schema);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/routines",
                  "host": ["{{base_url}}"],
                  "path": ["api", "users", "{{test_user_id}}", "routines"]
                }
              },
              "response": []
            },
            {
              "name": "Get routine",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    schema = JSON.parse(pm.collectionVariables.get(\"routine_schema\"));\r",
                      "    // console.log(schema);\r",
                      "    pm.expect(data).to.have.jsonSchema(schema);\r",
                      "});\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Add exercise to routine\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "}; \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}",
                  "host": ["{{base_url}}"],
                  "path": [
                    "api",
                    "users",
                    "{{test_user_id}}",
                    "routines",
                    "{{test_routine_id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete routine",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}",
                  "host": ["{{base_url}}"],
                  "path": [
                    "api",
                    "users",
                    "{{test_user_id}}",
                    "routines",
                    "{{test_routine_id}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "RoutineExercises",
          "item": [
            {
              "name": "Add exercise to routine",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    schema = JSON.parse(pm.collectionVariables.get(\"routine_exercise_schema\"));\r",
                      "    // console.log(schema);\r",
                      "    pm.expect(data).to.have.jsonSchema(schema);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"routineExercise_id\", data.id);\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Get exercises in routine with details\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "}; \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}/exercises?exerciseId={{test_exercise_id}}",
                  "host": ["{{base_url}}"],
                  "path": [
                    "api",
                    "users",
                    "{{test_user_id}}",
                    "routines",
                    "{{test_routine_id}}",
                    "exercises"
                  ],
                  "query": [
                    {
                      "key": "exerciseId",
                      "value": "{{test_exercise_id}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get exercises in routine with details",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response body is an array\", function () {\r",
                      "    pm.expect(data).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "if (data.length > 0) {\r",
                      "    pm.test(\"First item has valid schema\", function () {\r",
                      "        const firstItem = data[0];\r",
                      "        let mainSchema = JSON.parse(pm.collectionVariables.get(\"routine_exercise_schema_with_details\"));\r",
                      "        let exerciseSchema = JSON.parse(pm.collectionVariables.get(\"exercise_schema\"));\r",
                      "        // Dynamically insert the exercise schema into the main schema\r",
                      "        mainSchema.properties[\"exercise\"] = exerciseSchema;\r",
                      "        // console.log(mainSchema);\r",
                      "        pm.expect(firstItem).to.have.jsonSchema(mainSchema);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Get exercises in routine without details\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "}; \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}/exercises/?includeDetails=true",
                  "host": ["{{base_url}}"],
                  "path": [
                    "api",
                    "users",
                    "{{test_user_id}}",
                    "routines",
                    "{{test_routine_id}}",
                    "exercises",
                    ""
                  ],
                  "query": [
                    {
                      "key": "includeDetails",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get exercises in routine without details",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is valid JSON\", function () {\r",
                      "    pm.response.to.have.jsonBody();\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response body is an array\", function () {\r",
                      "    pm.expect(data).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "if (data.length > 0) {\r",
                      "    pm.test(\"First item has valid schema\", function () {\r",
                      "        const firstItem = data[0];\r",
                      "        schema = JSON.parse(pm.collectionVariables.get(\"routine_exercise_schema\"));\r",
                      "        // console.log(schema);\r",
                      "        pm.expect(firstItem).to.have.jsonSchema(schema);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Remove exercise from routine\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "}; \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}/exercises?includeDetails=false",
                  "host": ["{{base_url}}"],
                  "path": [
                    "api",
                    "users",
                    "{{test_user_id}}",
                    "routines",
                    "{{test_routine_id}}",
                    "exercises"
                  ],
                  "query": [
                    {
                      "key": "includeDetails",
                      "value": "false"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Remove exercise from routine",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
                      "});\r",
                      "\r",
                      "// Check if it's part of a collection run\r",
                      "if (pm.info.iteration === 0) {\r",
                      "    if (data.status === \"success\") {\r",
                      "        pm.setNextRequest(\"Delete routine\");\r",
                      "    } else {\r",
                      "        pm.setNextRequest(null);\r",
                      "    } \r",
                      "}; \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/users/{{test_user_id}}/routines/{{test_routine_id}}/exercises/{{test_exercise_id}}",
                  "host": ["{{base_url}}"],
                  "path": [
                    "api",
                    "users",
                    "{{test_user_id}}",
                    "routines",
                    "{{test_routine_id}}",
                    "exercises",
                    "{{test_exercise_id}}"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ],
      "description": "The pre-request script in this folder runs before every descendent request automatically and sets the correct bearer token header value based on what environment has been selected to be tested.\n\nFor this to work for the production environment, make sure you've obtained an access token and set it as a collection variable by following the instructions in 'Overview' tab of 'Workout app' collection folder.",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "const environment = pm.environment.name;\r",
              "let accessToken;\r",
              "\r",
              "if (!environment) {\r",
              "    console.log(\"No environment selected. Exiting script.\");\r",
              "    return;\r",
              "} else if (environment.toLowerCase() !== 'production') {\r",
              "    console.log(\"Environment is not production. Setting dev access token.\");\r",
              "    accessToken = pm.collectionVariables.get(\"access_token_dev\")\r",
              "} else {\r",
              "    console.log(\"Environment is production. Setting prod access token.\");\r",
              "    accessToken = pm.collectionVariables.get(\"access_token_prod\");\r",
              "}\r",
              " pm.request.headers.add({\r",
              "        key: 'Authorization',\r",
              "        value: `Bearer ${accessToken}`\r",
              "});"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        }
      ]
    }
  ],
  "auth": {
    "type": "oauth2",
    "oauth2": [
      {
        "key": "authRequestParams",
        "value": [
          {
            "key": "audience",
            "value": "{{auth0_audience}}",
            "enabled": true,
            "send_as": "request_url"
          }
        ],
        "type": "any"
      },
      {
        "key": "authUrl",
        "value": "{{auth0_url}}/authorize",
        "type": "string"
      },
      {
        "key": "tokenName",
        "value": "access_token",
        "type": "string"
      },
      {
        "key": "clientSecret",
        "value": "{{auth0_client_secret}}",
        "type": "string"
      },
      {
        "key": "accessTokenUrl",
        "value": "{{auth0_url}}/token",
        "type": "string"
      },
      {
        "key": "clientId",
        "value": "{{auth0_client_id}}",
        "type": "string"
      },
      {
        "key": "useBrowser",
        "value": true,
        "type": "boolean"
      },
      {
        "key": "refreshRequestParams",
        "value": [],
        "type": "any"
      },
      {
        "key": "tokenRequestParams",
        "value": [],
        "type": "any"
      },
      {
        "key": "challengeAlgorithm",
        "value": "S256",
        "type": "string"
      },
      {
        "key": "redirect_uri",
        "value": "https://workout-app-rwp.netlify.app/callback",
        "type": "string"
      },
      {
        "key": "grant_type",
        "value": "authorization_code",
        "type": "string"
      },
      {
        "key": "addTokenTo",
        "value": "header",
        "type": "string"
      },
      {
        "key": "client_authentication",
        "value": "body",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "access_token_prod",
      "value": ""
    },
    {
      "key": "access_token_dev",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_schema",
      "value": "{\"type\": \"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"},\"auth0Id\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"email\",\"auth0Id\"],\"additionalProperties\":false}",
      "type": "string"
    },
    {
      "key": "exercise_schema",
      "value": "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"userId\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"userId\"],\"additionalProperties\":false}",
      "type": "string"
    },
    {
      "key": "routine_schema",
      "value": "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"userId\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"userId\"],\"additionalProperties\":false}",
      "type": "string"
    },
    {
      "key": "routine_exercise_schema_with_details",
      "value": "{\"type\":\"object\",\"properties\":{\"id\": {\"type\": \"integer\"},\"routineId\":{\"type\":\"integer\"},\"exerciseId\":{\"type\":\"integer\"},\"exerciseOrder\":{\"type\":\"integer\"}, \"exercise\":\"SCHEMA INSERTED IN TEST\"},\"required\":[\"id\",\"routineId\",\"exerciseId\",\"exerciseOrder\",\"exercise\"],\"additionalProperties\":false}",
      "type": "string"
    },
    {
      "key": "routine_exercise_schema",
      "value": "{\"type\":\"object\",\"properties\":{\"id\": {\"type\": \"integer\"},\"routineId\":{\"type\":\"integer\"},\"exerciseId\":{\"type\":\"integer\"},\"exerciseOrder\":{\"type\":\"integer\"}},\"required\":[\"id\",\"routineId\",\"exerciseId\",\"exerciseOrder\"],\"additionalProperties\":false}",
      "type": "string"
    }
  ]
}
